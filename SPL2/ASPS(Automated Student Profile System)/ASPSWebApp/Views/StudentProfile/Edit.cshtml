@using ASPSDAL
@model ASPSDAL.Student

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                @{
                    if ((Session["Student"]) != null)
                    {
                        <li>@Html.ActionLink(((Student)Session["Student"]).Name, "Index", "StudentProfile")</li>
                    }
                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Activity<span class="caret"></span></a>
                <ul class="dropdown-menu" role="menu">
                    <li>@Html.ActionLink("Edit Basic Information", "Edit", "StudentProfile")</li>
                    <li>@Html.ActionLink("Change Password", "ChangePassword", "StudentProfile")</li>
                    <li>@Html.ActionLink("Add Content", "Index", "Contents")</li>
                </ul>
                <li>@Html.ActionLink("Sign Out", "SignOut", "SignIn")</li>
            </ul>
        </div>
    </div>
</div>

@{
    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem
    {
        Text = "Islam",
        Value = "Islam",
        Selected = true
    });
    listItems.Add(new SelectListItem
    {
        Text = "Hinduism",
        Value = "Hinduism"
    });
    listItems.Add(new SelectListItem
    {
        Text = "Christianity",
        Value = "Christianity"
    });
    listItems.Add(new SelectListItem
    {
        Text = "Buddhism",
        Value = "Buddhism"
    });
    listItems.Add(new SelectListItem
    {
        Text = "Other",
        Value = "Other"
    });

    List<SelectListItem> bloodList = new List<SelectListItem>();
    bloodList.Add(new SelectListItem
    {
        Text = "O-",
        Value = "O-"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "O+",
        Value = "O+"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "A-",
        Value = "A-"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "A+",
        Value = "A+"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "B-",
        Value = "B-"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "O-",
        Value = "O-"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "B+",
        Value = "B+"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "AB-",
        Value = "AB-"
    });
    bloodList.Add(new SelectListItem
    {
        Text = "AB+",
        Value = "AB+"
    });
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Student</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.StudentID)

        <div class="form-group">
            @Html.LabelFor(model => model.StudentEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StudentEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.BloodGroup, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.BloodGroup, bloodList, htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Religion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Religion, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.Religion, listItems, htmlAttributes: new {@class ="form-control"})
                @Html.ValidationMessageFor(model => model.Religion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })*@
                Male: @Html.RadioButtonFor(model => model.Gender, "Male", htmlAttributes: new {@class = "active"})
                Female: @Html.RadioButtonFor(model => model.Gender, "Female")
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Roll, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Roll, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Roll, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RegistrationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RegistrationNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RegistrationNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Result, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Result, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Result, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
